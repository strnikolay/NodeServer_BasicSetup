
В Express >= 4.16 синтаксический анализатор тела был повторно добавлен в методы express.json(). 
Вам не нужно использовать require("body-parser")в экспрессе. Потому что в экспрессе из v4 реализован body-parser. 

const express = require("express");
const app = express();
app.use(express.json());

И вы можете использовать:
app.use(express.json())
app.use(express.urlencoded({extended: true}))
Расширенный параметр позволяет выбирать между синтаксическим анализом данных, закодированных в URL, с помощью библиотеки querystring (если значение равно false) или библиотеки qs (если значение true). «Расширенный» синтаксис позволяет кодировать богатые объекты и массивы в формате с кодировкой URL, что позволяет использовать JSON-подобный опыт с кодировкой URL. Для получения дополнительной информации см. библиотеку qs здесь .
По умолчанию - true, но использование значения по умолчанию устарело. Пожалуйста, изучите разницу между qs и querystring и выберите соответствующую настройку.

Это поможет вам создать объект из ввода формы
  <input type="text" class="form-control" placeholder='Text' name="comment[text]" value="<%=comment.text%>">
эти две строки помогут вам создать объект напрямую без хлопот, чтобы установить переменные и создать свой собственный объект. 
если вы установите для расширенного свойства значение false, он не будет создавать объект и вернет undefined.

Расширенный протокол использует qs ( https://www.npmjs.com/package/qs )
для анализа x-www-form-urlencodedданных. 
Основное преимущество qs заключается в том, что он использует очень мощный алгоритм сериализации/десериализации, 
способный сериализовать любую json-подобную структуру данных.

Но веб-браузеры обычно не используют этот протокол, потому что x-www-form-urlencoded был разработан для сериализации плоских html-форм.
Тем не менее, это может пригодиться, если вы собираетесь отправлять сложные структуры данных с помощью ajax.

библиотека querystring ( https://www.npmjs.com/package/querystring устаревший пакет)
предоставляет базовый алгоритм сериализации/десериализации, который используется всеми веб-браузерами для сериализации данных формы.
Этот базовый алгоритм значительно проще расширенного, но ограничен плоскими структурами данных.

Оба алгоритма работают одинаково с плоскими данными.
Теперь, когда вы знаете плюсы и минусы обоих алгоритмов, вам решать, какой из них лучше подходит для вашего приложения.

Документация ноде по querystring https://nodejs.org/api/querystring.html